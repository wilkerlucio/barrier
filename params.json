{"name":"Barrier","tagline":"A test framework that embraces promises for real","body":"Barrier\r\n=======\r\n\r\nA test framework that embraces promises for real\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\nnpm install barriertest\r\n```\r\n\r\nBasic Testing\r\n-------------\r\n\r\nThis part describes the regular sync tests.\r\n\r\nBarrier uses RSpec-like syntax to describe tests, as so:\r\n\r\n```coffee\r\ndescribe \"MyObject\", ->\r\n  it \"sums two numbers\", ->\r\n    expect(sum(2, 3)).to.eq(5)\r\n```\r\n\r\nYou can nest describe blocks as you like:\r\n\r\n```coffee\r\ndescribe \"MyObject\", ->\r\n  describe \"some internal\", ->\r\n    it \"do something\", ->\r\n      expect(something()).to.eq(true)\r\n```\r\n\r\nWe support `before`, `beforeEach`, `after` and `afterEach` clauses:\r\n\r\n```coffee\r\ndescribe \"MyObject\", ->\r\n  someVar = null\r\n\r\n  before -> someVar = \"hello\"\r\n\r\n  it \"must set someVar\", ->\r\n    expect(someVar).to.eq(\"hello\")\r\n```\r\n\r\nAlso, we support lazy blocks for dependency injection:\r\n\r\n```coffee\r\ndescribe \"MyObject\", ->\r\n  lazy \"value\", -> 50\r\n\r\n  it \"loads the value\", (value) ->\r\n    expect(value).to.eq(50)\r\n```\r\n\r\nNote that the we do a reflection on the function to extract the variable name, them we lookup and build it for each test.\r\n\r\nAnd you can inject dependencies on each other:\r\n\r\n```coffee\r\ndescribe \"MyObject\", ->\r\n  lazy \"value\", -> 50\r\n  lazy \"value2\", (value) -> value + 10\r\n\r\n  it \"loads the values\", (value2) ->\r\n    expect(value2).to.eq(60)\r\n```\r\n\r\nAsync Testing\r\n-------------\r\n\r\nFor basic async testing, you can call `async` into the current object to make the test wait:\r\n\r\n```coffee\r\ndescribe \"Awesome\", ->\r\n  it \"supports async testing\", ->\r\n    done = @async()\r\n\r\n    setTimeout ->\r\n      expect(true).to.be.true()\r\n      done()\r\n    , 50\r\n```\r\n\r\nDespites the support on simple async testing, we really recommend you to use promises instead, as described on the next section.\r\n\r\nPromises Testing\r\n----------------\r\n\r\nWe recognize that there is a lot of async code into Node, and also, we recognize that promises have a great value in helping to write better async code.\r\n\r\nThat's why Barrier supports and recommends promises usage over the entire testing process.\r\n\r\nBut actually there is not much to say about the usage, because it's just transparent! You can just use promises as values and we handle the rest!\r\n\r\nCheck some examples:\r\n\r\n```coffee\r\ndescribe \"Using Promises\", ->\r\n  it \"can use promises as values on expectations\", ->\r\n    # imagine that loadUser and fetchRemoteAge are functions that returns\r\n    # promises that will eventually handle de values\r\n    expect(loadUser(30)).to.haveProperty(\"age\", fetchRemoteAge())\r\n```\r\n\r\nAlso, if your test returns a promise, the runner will wait for it:\r\n\r\n```coffee\r\ndescribe \"Delaying the runner\", ->\r\n  it \"will wait for my promise\", ->\r\n    Q(\"value\").delay(30).then (v) ->\r\n      expect(v).to.eq(\"value\") # and that's it, Barrier will do the async handling magic\r\n```\r\n\r\nBefore and after blocks does the same, if you return promises on they, the runner will wait before going on:\r\n\r\n```coffee\r\ndescribe \"Before promise me...\", ->\r\n  user = null\r\n  userDecorated = null\r\n\r\n  before -> loadUser().then (u) -> user = u\r\n  # note that before blocks run in series, so, it's safe to expect that previous\r\n  # before blocks are done\r\n  before -> userDecorated = decorateUser(user)\r\n\r\n  it \"is awesome\", -> expect(userDecorated).to.not().be.null()\r\n```\r\n\r\nBut remember about Lazy Attributes? They can be promises too!\r\n\r\n```coffee\r\ndescribe \"Lazy Promises\", ->\r\n  lazy \"user\", -> findUserOnDB()\r\n\r\n  it \"will load the promise and inject it!\", (user) ->\r\n    expect(user.name).to.eq(\"sir\")\r\n```\r\n\r\nAnd even better, you can do it while injecting lazy dependencies!\r\n\r\n```coffee\r\ndescribe \"Lazy Promises Dependencies!\", ->\r\n  lazy \"store\", -> createStoreOnDb()\r\n  lazy \"user\", (store) -> createUser(store: store.id)\r\n\r\n  it \"will load gracefully\", (user) ->\r\n    expect(user.store).not().null()\r\n```\r\n\r\nGet much more examples [here](https://github.com/wilkerlucio/barrier/blob/master/test/examples)\r\n","google":"UA-3833116-10","note":"Don't delete this file! It's used internally to help with page regeneration."}